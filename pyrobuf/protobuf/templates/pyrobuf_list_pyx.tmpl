from cpython.mem cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free
from libc.stdint cimport *
from cpython.ref cimport PyObject


cdef class NullListener:
    property _is_present_in_parent:
        def __get__(self):
            return True

    cpdef void _Modified(self):
        return

cdef public NullListener null_listener = NullListener()


cdef class TypedList(list):

    def __init__(self, type list_type, object listener=None):
        self._list_type = list_type
        if listener is None:
            self._listener = <PyObject *>null_listener
        else:
            self._listener = <PyObject *>listener

    property list_type:
        def __get__(self):
            return self._list_type

    def __setitem__(self, i, x):
        try:
            assert isinstance(x, self._list_type)
        except AssertionError:
            raise Exception("type mismatch")

        super(TypedList, self).__setitem__(i, x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

{% if version_major != 3 %}
    def __setslice__(self, i, j, x):
        try:
            assert isinstance(x, TypedList)
            assert self._list_type == x.list_type
        except AssertionError:
            raise Exception("type mismatch")

        super(TypedList, self).__setslice__(i, j, x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()
{%- endif %}

    def add(self, **kwargs):
        elt = self._list_type(**kwargs)
        super(TypedList, self).append(elt)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()
        return elt

    def append(self, x):
        try:
            assert isinstance(x, self._list_type)
        except AssertionError:
            raise Exception("type mismatch")

        super(TypedList, self).append(x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def extend(self, x):
        for i in x:
            elt = self._list_type()
            elt.MergeFrom(i)
            super(TypedList, self).append(elt)

        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def insert(self, i, x):
        try:
            assert isinstance(x, self._list_type)
        except AssertionError:
            raise Exception("type mismatch")

        super(TypedList, self).insert(i, x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()


cdef class BytesList(list):

    def __init__(self, object listener=None):
        if listener is None:
            self._listener = <PyObject *>null_listener
        else:
            self._listener = <PyObject *>listener

    def __setitem__(self, i, x):
        cdef list values

        if isinstance(i, {% if version_major == 2 %}(int, long){% else %}int{% endif %}):
            if not isinstance(x, {% if version_major == 2 %}str{% else %}bytes{% endif %}):
                raise TypeError("%r has type %s, but expected one of: (%s,)" % (x, type(x), {% if version_major == 2 %}str{% else %}bytes{% endif %}))

            list.__setitem__(self, i, x)
        elif isinstance(i, slice):
            values = list()

            for val in x:
                if isinstance(val, {% if version_major == 2 %}str{% else %}bytes{% endif %}):
                    values.append(val)
                else:
                    raise TypeError("%r has type %s, but expected one of: (%s,)" % (val, type(val), {% if version_major == 2 %}str{% else %}bytes{% endif %}))

            list.__setitem__(self, i, values)
        else:
            raise TypeError("list indices must be integers, not %s" % type(i).__name__)

        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

{% if version_major == 2 %}
    def __setslice__(self, i, j, x):
        cdef list values = list()

        for val in x:
            if isinstance(val, str):
                values.append(val)
            else:
                raise TypeError("%r has type %s, but expected one of: (%s,)" % (val, type(val), str))

        list.__setslice__(self, i, j, values)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()
{%- endif %}

    def append(self, x):
        if not isinstance(x, {% if version_major == 2 %}str{% else %}bytes{% endif %}):
            raise TypeError("%r has type %s, but expected one of: (%s,)" % (x, type(x), {% if version_major == 2 %}str{% else %}bytes{% endif %}))

        list.append(self, x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def extend(self, x):
        for val in x:
            if not isinstance(val, {% if version_major == 2 %}str{% else %}bytes{% endif %}):
                raise TypeError("%r has type %s, but expected one of: (%s,)" % (val, type(val), {% if version_major == 2 %}str{% else %}bytes{% endif %}))
            list.append(self, val)

        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def insert(self, i, x):

        if not isinstance(x, {% if version_major == 2 %}str{% else %}bytes{% endif %}):
            raise TypeError("%r has type %s, but expected one of: (%s,)" % (x, type(x), {% if version_major == 2 %}str{% else %}bytes{% endif %}))

        list.insert(self, i, x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()


cdef class StringList(list):

    def __init__(self, object listener=None):
        if listener is None:
            self._listener = <PyObject *>null_listener
        else:
            self._listener = <PyObject *>listener

    def __setitem__(self, i, x):
        cdef list values
        cdef {% if version_major == 2 %}unicode{% else %}str{% endif %} value

        if isinstance(i, {% if version_major == 2 %}(int, long){% else %}int{% endif %}):
            {%- if version_major == 2 %}
            if isinstance(x, str):
                value = x.decode('utf-8')
            elif isinstance(x, unicode):
                value = x
            else:
                raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (x, type(x), str, unicode))
            {%- else %}
            if isinstance(x, str):
                value = x
            elif isinstance(x, bytes):
                value = x.decode('utf-8')
            else:
                raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (x, type(x), bytes, str))
            {%- endif %}

            list.__setitem__(self, i, value)
        elif isinstance(i, slice):
            values = list()

            for val in x:
                {%- if version_major == 2 %}
                if isinstance(val, str):
                    values.append(val.decode('utf-8'))
                elif isinstance(val, unicode):
                    values.append(val)
                else:
                    raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (val, type(val), str, unicode))
                {%- else %}
                if isinstance(val, str):
                    values.append(val)
                elif isinstance(val, bytes):
                    values.append(val.decode('utf-8'))
                else:
                    raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (val, type(val), bytes, str))
                {%- endif %}

            list.__setitem__(self, i, values)
        else:
            raise TypeError("list indices must be integers, not %s" % type(i).__name__)

        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

{% if version_major == 2 %}
    def __setslice__(self, i, j, x):
        cdef list values = list()

        for val in x:
            if isinstance(val, str):
                values.append(val.decode('utf-8'))
            elif isinstance(val, unicode):
                values.append(val)
            else:
                raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (val, type(val), str, unicode))

        list.__setslice__(self, i, j, values)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()
{%- endif %}

    def append(self, x):
        cdef {% if version_major == 2 %}unicode{% else %}str{% endif %} value

        {%- if version_major == 2 %}
        if isinstance(x, unicode):
            value = x
        elif isinstance(x, str):
            value = x.decode('utf-8')
        else:
            raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (x, type(x), str, unicode))
        {%- else %}
        if isinstance(x, str):
            value = x
        elif isinstance(x, bytes):
            value = x.decode('utf-8')
        else:
            raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (x, type(x), bytes, str))
        {%- endif %}

        list.append(self, value)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def extend(self, x):
        cdef {% if version_major == 2 %}unicode{% else %}str{% endif %} value

        for val in x:
            {%- if version_major == 2 %}
            if isinstance(val, str):
                value = val.decode('utf-8')
            elif isinstance(val, unicode):
                value = val
            else:
                raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (val, type(val), str, unicode))
            {%- else %}
            if isinstance(val, bytes):
                value = val.decode('utf-8')
            elif isinstance(val, str):
                value = val
            else:
                raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (val, type(val), bytes, str))
            {%- endif %}
            list.append(self, value)

        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def insert(self, i, x):
        cdef {% if version_major == 2 %}unicode{% else %}str{% endif %} value

        {%- if version_major == 2 %}
        if isinstance(x, str):
            value = x.decode('utf-8')
        elif isinstance(x, unicode):
            value = x
        else:
            raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (x, type(x), str, unicode))
        {%- else %}
        if isinstance(x, bytes):
            value = x.decode('utf-8')
        elif isinstance(x, str):
            value = x
        else:
            raise TypeError("%r has type %s, but expected one of: (%s, %s)" % (x, type(x), bytes, str))
        {%- endif %}

        list.insert(self, i, value)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()


{% macro scalar_list(name, type, format) %}
cdef class {{ name }}:

    def __cinit__(self, size_t size=16, object listener=None):
        self._data = <{{ type }} *>PyMem_Malloc(size * sizeof({{ type }}))
        if not self._data:
            raise MemoryError()

        self._n_items = 0
        self._size = size
        if listener is None:
            self._listener = <PyObject *>null_listener
        else:
            self._listener = <PyObject *>listener

    def __dealloc__(self):
        PyMem_Free(self._data)

    def __contains__(self, {{ type }} x):
        cdef size_t i
        for i in range(self._n_items):
            if self._data[i] == x:
                return True

        return False

    def __delitem__(self, int i):
        if i < 0:
            i += <int>self._n_items

        if i < 0 or <size_t>i >= self._n_items:
            raise IndexError("list index out of range")

        cdef size_t j
        for j in range(i, self._n_items):
            self._data[j] = self._data[j + 1]

        self._n_items -= 1
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def __getitem__(self, int i):
        if i < 0:
            i += <int>self._n_items

        if i < 0 or <size_t>i >= self._n_items or i < 0:
            raise IndexError("list index out of range")

        return self._data[i]

    def __iter__(self):
        cdef size_t idx = 0
        while idx < self._n_items:
            yield self._data[idx]
            idx += 1

    def __len__(self):
        return self._n_items

    def __repr__(self):
        return repr(list(self))

    def __setitem__(self, int i, {{ type }} x):
        if i < 0:
            i += <int>self._n_items

        if i < 0 or <size_t>i >= self._n_items:
            raise IndexError("list index out of range")

        self._data[i] = x
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    def __str__(self):
        return str(list(self))

    def __getbuffer__(self, Py_buffer *buffer, int flags):
        
        cdef Py_ssize_t itemsize = sizeof({{ type }})
        self.shape[0] = self._n_items
        self.strides[0] = 1

        buffer.buf = <char *>(self._data)
        buffer.format = '{{ format }}'
        buffer.internal = NULL                  # see References
        buffer.itemsize = itemsize
        buffer.len = self._n_items
        buffer.ndim = 1
        buffer.obj = self
        buffer.readonly = 1
        buffer.shape = self.shape
        buffer.strides = self.strides
        buffer.suboffsets = NULL                # for pointer arrays only

    def __releasebuffer__(self, Py_buffer *buffer):
        pass

    def __eq__(self, other):
        try:
            if len(self) != len(other):
                return False
        except TypeError:
            return False

        for x, y in zip(self, other):
            if x != y:
                return False

        return True

    def __neq__(self, other):
        return not self == other

    cpdef append(self, {{ type }} x):
        self._append(x)
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    cpdef extend(self, x):
        for i in x:
            self._append(i)

        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    cpdef insert(self, int i, {{ type }} x):
        cdef {{ type }} *mem
        cdef size_t j

        if i < 0:
            i += <int>self._n_items

        if i < 0 or <size_t>i > self._n_items:
            raise IndexError("list index out of range")

        if self._n_items == self._size:
            mem = <{{ type }} *>PyMem_Realloc(self._data, 2 * self._size * sizeof({{ type }}))
            if not mem:
                raise MemoryError()

            self._data = mem
            self._size *= 2

        for j in range(self._n_items, <size_t>i, -1):
            self._data[j] = self._data[j - 1]

        self._data[i] = x
        self._n_items += 1
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    cpdef pop(self):
        if self._n_items == 0:
            raise IndexError("pop from empty list")

        self._n_items -= 1
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()
        return self._data[self._n_items]

    cpdef remove(self, {{ type }} x):
        cdef size_t i
        cdef size_t j
        cdef bint found = 0

        for i in range(self._n_items):
            if self._data[i] == x:
                found = 1
                break

        if found == 0:
            raise ValueError("x not in list")

        for j in range(i, self._n_items):
            self._data[j] = self._data[j + 1]
        
        self._n_items -= 1
        listener = <object>self._listener
        if not listener._is_present_in_parent:
            listener._Modified()

    cdef void _append(self, {{ type }} x):
        cdef {{ type }} *mem

        if self._n_items == self._size:
            mem = <{{ type }} *>PyMem_Realloc(self._data, 2 * self._size * sizeof({{ type }}))
            if not mem:
                raise MemoryError()

            self._data = mem
            self._size *= 2

        self._data[self._n_items] = x
        self._n_items += 1
{% endmacro %}

{% for name, type in def.items() %}
{{ scalar_list(name, type, format_map[type]) }}
{% endfor %}
